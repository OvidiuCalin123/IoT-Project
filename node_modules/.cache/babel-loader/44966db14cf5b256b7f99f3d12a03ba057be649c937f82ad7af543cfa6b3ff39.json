{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\OneDrive - Universitatea Politehnica Timisoara\\\\Desktop\\\\IoT website\\\\EcoLight\\\\src\\\\IoT\\\\logInIndex.js\",\n  _s = $RefreshSig$();\n// Add a state to track authentication status\nimport React, { useState, useEffect } from \"react\";\nimport logo from \"../designFIles/EcoLight.png\";\nimport googleLoginImage from \"../designFIles/googlelogin.png\";\nimport { signInWithGooglePopup, signOut } from \"./firebase\"; // Assuming you have a signOut function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LogInIndex = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Track authentication status\n\n  useEffect(() => {\n    // Check if user is already logged in (e.g., persisted session)\n    // Update isLoggedIn state accordingly\n    // Example:\n    // const user = checkIfUserIsLoggedIn(); // Implement this function\n    // setIsLoggedIn(!!user);\n  }, []);\n  const logGoogleUser = async () => {\n    try {\n      const response = await signInWithGooglePopup();\n      console.log(response);\n      setIsLoggedIn(true); // Update authentication status\n      window.location.href = \"http://localhost:3000/welcome\";\n    } catch (error) {\n      console.error(\"Error signing in with Google:\", error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are already logged in.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => signOut(),\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logo\",\n        src: logo,\n        alt: \"Logo\",\n        style: {\n          width: \"25rem\",\n          height: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"google-login=btn\",\n        src: googleLoginImage,\n        alt: \"Google Login\",\n        className: \"google-login-button\",\n        onClick: logGoogleUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(LogInIndex, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n_c = LogInIndex;\nexport default LogInIndex;\nvar _c;\n$RefreshReg$(_c, \"LogInIndex\");","map":{"version":3,"names":["React","useState","useEffect","logo","googleLoginImage","signInWithGooglePopup","signOut","jsxDEV","_jsxDEV","LogInIndex","_s","isLoggedIn","setIsLoggedIn","logGoogleUser","response","console","log","window","location","href","error","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","style","width","height","id","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/OneDrive - Universitatea Politehnica Timisoara/Desktop/IoT website/EcoLight/src/IoT/logInIndex.js"],"sourcesContent":["// Add a state to track authentication status\r\nimport React, { useState, useEffect } from \"react\";\r\nimport logo from \"../designFIles/EcoLight.png\";\r\nimport googleLoginImage from \"../designFIles/googlelogin.png\";\r\nimport { signInWithGooglePopup, signOut } from \"./firebase\"; // Assuming you have a signOut function\r\n\r\nexport const LogInIndex = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Track authentication status\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in (e.g., persisted session)\r\n    // Update isLoggedIn state accordingly\r\n    // Example:\r\n    // const user = checkIfUserIsLoggedIn(); // Implement this function\r\n    // setIsLoggedIn(!!user);\r\n  }, []);\r\n\r\n  const logGoogleUser = async () => {\r\n    try {\r\n      const response = await signInWithGooglePopup();\r\n      console.log(response);\r\n      setIsLoggedIn(true); // Update authentication status\r\n      window.location.href = \"http://localhost:3000/welcome\";\r\n    } catch (error) {\r\n      console.error(\"Error signing in with Google:\", error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      {isLoggedIn ? (\r\n        <div>\r\n          <p>You are already logged in.</p>\r\n          <button onClick={() => signOut()}>Log Out</button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <img\r\n            className=\"logo\"\r\n            src={logo}\r\n            alt=\"Logo\"\r\n            style={{ width: \"25rem\", height: \"auto\" }}\r\n          />\r\n          <img\r\n            id=\"google-login=btn\"\r\n            src={googleLoginImage}\r\n            alt=\"Google Login\"\r\n            className=\"google-login-button\"\r\n            onClick={logGoogleUser}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogInIndex;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,SAASC,qBAAqB,EAAEC,OAAO,QAAQ,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7D,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErDC,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;EAAA,CACD,EAAE,EAAE,CAAC;EAEN,MAAMW,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,qBAAqB,CAAC,CAAC;MAC9CU,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;MACrBF,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;MACrBK,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,+BAA+B;IACxD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC/D;EACF,CAAC;EAED,oBACEb,OAAA;IAAKc,SAAS,EAAC,WAAW;IAAAC,QAAA,EACvBZ,UAAU,gBACTH,OAAA;MAAAe,QAAA,gBACEf,OAAA;QAAAe,QAAA,EAAG;MAA0B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACjCnB,OAAA;QAAQoB,OAAO,EAAEA,CAAA,KAAMtB,OAAO,CAAC,CAAE;QAAAiB,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,gBAENnB,OAAA;MAAAe,QAAA,gBACEf,OAAA;QACEc,SAAS,EAAC,MAAM;QAChBO,GAAG,EAAE1B,IAAK;QACV2B,GAAG,EAAC,MAAM;QACVC,KAAK,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAO;MAAE;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC,eACFnB,OAAA;QACE0B,EAAE,EAAC,kBAAkB;QACrBL,GAAG,EAAEzB,gBAAiB;QACtB0B,GAAG,EAAC,cAAc;QAClBR,SAAS,EAAC,qBAAqB;QAC/BM,OAAO,EAAEf;MAAc;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjB,EAAA,CAhDWD,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAkDvB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}