{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\OneDrive - Universitatea Politehnica Timisoara\\\\Desktop\\\\IoT website\\\\EcoLight\\\\src\\\\IoT\\\\logInIndex.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport iotLogo from \"../designFIles/IoT_logo_transparent_bigger.png\";\nimport \"./welcomeBody.css\";\nimport { useLocation, Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WelcomeBody = () => {\n  _s();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const token = queryParams.get(\"token\");\n  const [isValidToken, setIsValidToken] = useState(false);\n  useEffect(() => {\n    // Check if token is valid\n    setIsValidToken(validateToken(token));\n  }, [token]);\n  const validateToken = token => {\n    // Check if token exists\n    if (!token) {\n      return false;\n    }\n    // Implement any additional validation logic here\n    // For now, we'll assume any non-empty token is valid\n    return true;\n  };\n  const handleLogout = () => {\n    const confirmLogout = window.confirm(\"Are you sure you want to log out?\");\n    if (confirmLogout) {\n      window.location.href = \"http://localhost:3000/login\";\n    }\n  };\n  if (!isValidToken) {\n    // Redirect to login if token is not valid\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-style\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-nav-text\",\n          children: \"Eco Light\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"header-logo\",\n          src: iotLogo,\n          alt: \"IoT Logo\",\n          style: {\n            width: \"5rem\",\n            height: \"auto\",\n            paddingLeft: \"0.5rem\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-nav-text\",\n          onClick: handleLogout,\n          children: \"Log Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-layout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n// import React, { useEffect } from \"react\";\n// import logo from \"../designFIles/IoT_Light.jpg\";\n// import googleLoginImage from \"../designFIles/googlelogin.png\";\n// import \"./logInIndex.css\";\n// import { initializeApp } from \"firebase/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// import { getAuth, GoogleAuthProvider } from \"firebase/auth\";\n\n// const firebaseConfig = {\n//   apiKey: \"YOUR_API_KEY\",\n//   authDomain: \"YOUR_AUTH_DOMAIN\",\n//   projectId: \"YOUR_PROJECT_ID\",\n//   storageBucket: \"YOUR_STORAGE_BUCKET\",\n//   messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n//   appId: \"YOUR_APP_ID\",\n//   measurementId: \"YOUR_MEASUREMENT_ID\",\n// };\n\n// // Initialize Firebase\n// const app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n// const auth = getAuth();\n\n// export const LogInIndex = () => {\n//   useEffect(() => {\n//     const unregisterAuthObserver = auth.onAuthStateChanged((user) => {\n//       if (user) {\n//         // User is signed in, redirect to the home page or do any necessary actions\n//         console.log(\"User is signed in:\", user);\n//       } else {\n//         // User is signed out\n//         console.log(\"User is signed out\");\n//       }\n//     });\n\n//     // Cleanup function\n//     return () => unregisterAuthObserver();\n//   }, []);\n\n//   const handleGoogleLogin = () => {\n//     const provider = new GoogleAuthProvider();\n//     auth\n//       .signInWithRedirect(provider)\n//       .then(() => {\n//         // Redirecting to Google sign-in page\n//       })\n//       .catch((error) => {\n//         // Handle errors here\n//         console.error(\"Error signing in with Google:\", error);\n//       });\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <img\n//         className=\"logo\"\n//         src={logo}\n//         alt=\"Logo\"\n//         style={{ width: \"25rem\", height: \"auto\" }}\n//       />\n//       <button className=\"google-login-button\" onClick={handleGoogleLogin}>\n//         <img src={googleLoginImage} alt=\"Google Login\" />\n//       </button>\n//     </div>\n//   );\n// };\n\n// import React from \"react\";\n// import { auth } from \"./firebase\";\n// import logo from \"../designFIles/IoT_Light.jpg\";\n// import googleLoginImage from \"../designFIles/googlelogin.png\";\n// import \"./logInIndex.css\";\n// import { initializeApp } from \"firebase/app\";\n// import { getAuth, GoogleAuthProvider } from \"firebase/auth\";\n\n// const firebaseConfig = {\n//   apiKey: \"AIzaSyB3S6pXq8fZXUKignwhjnmGEqFoZlD6CBE\",\n//   authDomain: \"iot-light-68724.firebaseapp.com\",\n//   projectId: \"iot-light-68724\",\n//   storageBucket: \"iot-light-68724.appspot.com\",\n//   messagingSenderId: \"127885636351\",\n//   appId: \"1:127885636351:web:47b9a5df0098ade0e652ca\",\n// };\n\n// const firebaseApp = initializeApp(firebaseConfig);\n// const firebaseAuth = getAuth(firebaseApp);\n// const provider = new GoogleAuthProvider();\n\n// const handleGoogleSignIn = () => {\n//   auth\n//     .signInWithPopup(provider)\n//     .then((result) => {\n//       console.log(\"Successful login:\", result.user);\n//     })\n//     .catch((error) => {\n//       console.error(\"Login error:\", error);\n//     });\n// };\n\n// export const LogInIndex = () => {\n//   return (\n//     <div className=\"container\">\n//       <img\n//         className=\"logo\"\n//         src={logo}\n//         alt=\"Logo\"\n//         style={{ width: \"25rem\", height: \"auto\" }}\n//       />\n//       <img\n//         src={googleLoginImage}\n//         alt=\"Google Login\"\n//         className=\"google-login-button\"\n//         onClick={handleGoogleSignIn}\n//       />\n//     </div>\n//   );\n// };\n_s(WelcomeBody, \"dGNz/AeAURdl9SpyQtUjNgwEZ5M=\", false, function () {\n  return [useLocation];\n});\n_c = WelcomeBody;\nvar _c;\n$RefreshReg$(_c, \"WelcomeBody\");","map":{"version":3,"names":["React","useState","useEffect","iotLogo","useLocation","Navigate","jsxDEV","_jsxDEV","WelcomeBody","_s","location","queryParams","URLSearchParams","search","token","get","isValidToken","setIsValidToken","validateToken","handleLogout","confirmLogout","window","confirm","href","to","fileName","_jsxFileName","lineNumber","columnNumber","children","className","src","alt","style","width","height","paddingLeft","onClick","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/OneDrive - Universitatea Politehnica Timisoara/Desktop/IoT website/EcoLight/src/IoT/logInIndex.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport iotLogo from \"../designFIles/IoT_logo_transparent_bigger.png\";\r\nimport \"./welcomeBody.css\";\r\nimport { useLocation, Navigate } from \"react-router-dom\";\r\n\r\nexport const WelcomeBody = () => {\r\n  const location = useLocation();\r\n  const queryParams = new URLSearchParams(location.search);\r\n  const token = queryParams.get(\"token\");\r\n\r\n  const [isValidToken, setIsValidToken] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if token is valid\r\n    setIsValidToken(validateToken(token));\r\n  }, [token]);\r\n\r\n  const validateToken = (token) => {\r\n    // Check if token exists\r\n    if (!token) {\r\n      return false;\r\n    }\r\n    // Implement any additional validation logic here\r\n    // For now, we'll assume any non-empty token is valid\r\n    return true;\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    const confirmLogout = window.confirm(\"Are you sure you want to log out?\");\r\n    if (confirmLogout) {\r\n      window.location.href = \"http://localhost:3000/login\";\r\n    }\r\n  };\r\n\r\n  if (!isValidToken) {\r\n    // Redirect to login if token is not valid\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"header-style\">\r\n        <div className=\"nav\">\r\n          <div className=\"left-nav-text\">Eco Light</div>\r\n          <img\r\n            className=\"header-logo\"\r\n            src={iotLogo}\r\n            alt=\"IoT Logo\"\r\n            style={{ width: \"5rem\", height: \"auto\", paddingLeft: \"0.5rem\" }}\r\n          />\r\n          <div className=\"right-nav-text\" onClick={handleLogout}>\r\n            Log Out\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"options-layout\">\r\n        {/* Add your welcome page content here */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import logo from \"../designFIles/IoT_Light.jpg\";\r\n// import googleLoginImage from \"../designFIles/googlelogin.png\";\r\n// import \"./logInIndex.css\";\r\n// import { initializeApp } from \"firebase/app\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\n// import { getAuth, GoogleAuthProvider } from \"firebase/auth\";\r\n\r\n// const firebaseConfig = {\r\n//   apiKey: \"YOUR_API_KEY\",\r\n//   authDomain: \"YOUR_AUTH_DOMAIN\",\r\n//   projectId: \"YOUR_PROJECT_ID\",\r\n//   storageBucket: \"YOUR_STORAGE_BUCKET\",\r\n//   messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\r\n//   appId: \"YOUR_APP_ID\",\r\n//   measurementId: \"YOUR_MEASUREMENT_ID\",\r\n// };\r\n\r\n// // Initialize Firebase\r\n// const app = initializeApp(firebaseConfig);\r\n// const analytics = getAnalytics(app);\r\n// const auth = getAuth();\r\n\r\n// export const LogInIndex = () => {\r\n//   useEffect(() => {\r\n//     const unregisterAuthObserver = auth.onAuthStateChanged((user) => {\r\n//       if (user) {\r\n//         // User is signed in, redirect to the home page or do any necessary actions\r\n//         console.log(\"User is signed in:\", user);\r\n//       } else {\r\n//         // User is signed out\r\n//         console.log(\"User is signed out\");\r\n//       }\r\n//     });\r\n\r\n//     // Cleanup function\r\n//     return () => unregisterAuthObserver();\r\n//   }, []);\r\n\r\n//   const handleGoogleLogin = () => {\r\n//     const provider = new GoogleAuthProvider();\r\n//     auth\r\n//       .signInWithRedirect(provider)\r\n//       .then(() => {\r\n//         // Redirecting to Google sign-in page\r\n//       })\r\n//       .catch((error) => {\r\n//         // Handle errors here\r\n//         console.error(\"Error signing in with Google:\", error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <img\r\n//         className=\"logo\"\r\n//         src={logo}\r\n//         alt=\"Logo\"\r\n//         style={{ width: \"25rem\", height: \"auto\" }}\r\n//       />\r\n//       <button className=\"google-login-button\" onClick={handleGoogleLogin}>\r\n//         <img src={googleLoginImage} alt=\"Google Login\" />\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// import React from \"react\";\r\n// import { auth } from \"./firebase\";\r\n// import logo from \"../designFIles/IoT_Light.jpg\";\r\n// import googleLoginImage from \"../designFIles/googlelogin.png\";\r\n// import \"./logInIndex.css\";\r\n// import { initializeApp } from \"firebase/app\";\r\n// import { getAuth, GoogleAuthProvider } from \"firebase/auth\";\r\n\r\n// const firebaseConfig = {\r\n//   apiKey: \"AIzaSyB3S6pXq8fZXUKignwhjnmGEqFoZlD6CBE\",\r\n//   authDomain: \"iot-light-68724.firebaseapp.com\",\r\n//   projectId: \"iot-light-68724\",\r\n//   storageBucket: \"iot-light-68724.appspot.com\",\r\n//   messagingSenderId: \"127885636351\",\r\n//   appId: \"1:127885636351:web:47b9a5df0098ade0e652ca\",\r\n// };\r\n\r\n// const firebaseApp = initializeApp(firebaseConfig);\r\n// const firebaseAuth = getAuth(firebaseApp);\r\n// const provider = new GoogleAuthProvider();\r\n\r\n// const handleGoogleSignIn = () => {\r\n//   auth\r\n//     .signInWithPopup(provider)\r\n//     .then((result) => {\r\n//       console.log(\"Successful login:\", result.user);\r\n//     })\r\n//     .catch((error) => {\r\n//       console.error(\"Login error:\", error);\r\n//     });\r\n// };\r\n\r\n// export const LogInIndex = () => {\r\n//   return (\r\n//     <div className=\"container\">\r\n//       <img\r\n//         className=\"logo\"\r\n//         src={logo}\r\n//         alt=\"Logo\"\r\n//         style={{ width: \"25rem\", height: \"auto\" }}\r\n//       />\r\n//       <img\r\n//         src={googleLoginImage}\r\n//         alt=\"Google Login\"\r\n//         className=\"google-login-button\"\r\n//         onClick={handleGoogleSignIn}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,gDAAgD;AACpE,OAAO,mBAAmB;AAC1B,SAASC,WAAW,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAMO,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,KAAK,GAAGH,WAAW,CAACI,GAAG,CAAC,OAAO,CAAC;EAEtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd;IACAe,eAAe,CAACC,aAAa,CAACJ,KAAK,CAAC,CAAC;EACvC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMI,aAAa,GAAIJ,KAAK,IAAK;IAC/B;IACA,IAAI,CAACA,KAAK,EAAE;MACV,OAAO,KAAK;IACd;IACA;IACA;IACA,OAAO,IAAI;EACb,CAAC;EAED,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMC,aAAa,GAAGC,MAAM,CAACC,OAAO,CAAC,mCAAmC,CAAC;IACzE,IAAIF,aAAa,EAAE;MACjBC,MAAM,CAACX,QAAQ,CAACa,IAAI,GAAG,6BAA6B;IACtD;EACF,CAAC;EAED,IAAI,CAACP,YAAY,EAAE;IACjB;IACA,oBAAOT,OAAA,CAACF,QAAQ;MAACmB,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;EAEA,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAKuB,SAAS,EAAC,cAAc;MAAAD,QAAA,eAC3BtB,OAAA;QAAKuB,SAAS,EAAC,KAAK;QAAAD,QAAA,gBAClBtB,OAAA;UAAKuB,SAAS,EAAC,eAAe;UAAAD,QAAA,EAAC;QAAS;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC9CrB,OAAA;UACEuB,SAAS,EAAC,aAAa;UACvBC,GAAG,EAAE5B,OAAQ;UACb6B,GAAG,EAAC,UAAU;UACdC,KAAK,EAAE;YAAEC,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAE,MAAM;YAAEC,WAAW,EAAE;UAAS;QAAE;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjE,CAAC,eACFrB,OAAA;UAAKuB,SAAS,EAAC,gBAAgB;UAACO,OAAO,EAAElB,YAAa;UAAAU,QAAA,EAAC;QAEvD;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNrB,OAAA;MAAKuB,SAAS,EAAC;IAAgB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE1B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAnB,EAAA,CA7KaD,WAAW;EAAA,QACLJ,WAAW;AAAA;AAAAkC,EAAA,GADjB9B,WAAW;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}